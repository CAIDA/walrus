

                   The Walrus Graph Visualization Tool

                             version 0.1

                             ___ __, 2001

                         (c) 2001 CAIDA/UCSD

          (http://www.caida.org/tools/visualization/walrus/)
                   Young Hyun <youngh@caida.org>


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DESCRIPTION

Walrus is a tool for interactively visualizing large directed graphs in
three-dimensional space. Although Walrus can display graphs containing a
million nodes or more, visual clutter and occlusion greatly diminish the
effectiveness of the visualization as the number of nodes, or the degree of
their connectivity, increases.  The greater the connectivity, the more
occlusion becomes a problem. Thus, in practice, Walrus is best suited to
visualizing moderately sized graphs that are nearly trees. A graph with a
hundred thousand nodes and a slightly greater number of links is likely to
be comfortable to work with.

Walrus computes its layout based on a user-supplied spanning tree. Because
the specifics of the supplied spanning tree greatly affect the resulting
display, it is crucial that graphs contain a meaningful spanning tree. In
particular, the prominence and orderliness that Walrus gives to the links
in the spanning tree, in contrast to all other links, means that an
arbitrarily chosen spanning tree may create a misleading display. This
implies that graphs should ideally be inherently hierarchical.

Walrus uses 3D hyperbolic geometry to display graphs under a fisheye-like
distortion. The amount of magnification, and thus the level of visible
detail, varies across the display. This allows the user to examine the fine
details of a small area while always having a view of the whole graph
available as a frame of reference.  Graphs are rendered inside a sphere
that contains the Euclidean projection of 3D hyperbolic space. Points
within the sphere are magnified according to their radial distance from the
center. Objects near the center are magnified, while those near the
boundary are shrunk. The amount of magnification decreases continuously and
at an accelerated rate from the center to the boundary, until objects are
reduced to zero size at the latter, which represents infinity. By bringing
different parts of a graph to the magnified central region, the user can
examine every part of the graph in detail.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
REQUIREMENTS

Walrus requires Java3D v1.2.1 (or later) and JDK 1.3.0 (or later).  

Java3D:  http://java.sun.com/products/java-media/3D/index.html
JDK:     http://java.sun.com/j2se/

A hardware-accelerated graphics card is necessary for adequate performance.
It is also useful to have a speedy machine with lots of memory (128MB is
probably a minimum; 256MB or more is better; 512MB is probably required
for a million-node graph).

Walrus was developed and tested on a Sun Ultra 60 with an Elite 3D card
and 512MB of RAM, running Solaris 7, a box graciously donated by Sun.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DOCUMENTATION

See the 'docs' subdirectory for documentation.  In particular, the file
'guide.txt' contains a brief guide to using Walrus (see also QUICK START
below).


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CONTACT INFORMATION

To report bugs, email walrus-bugs@caida.org.  For general inquiry, email
walrus-info@caida.org.

A mailing list is available to discuss Walrus use and development.
To subscribe, email walrus-dev-request@caida.org with

   subscribe your-email-address

in the body (for example, 'subscribe foo@bar.com').  To unsubscribe,
email walrus-dev-request@caida.org with

   unsubscribe your-email-address

in the body.  All messages to the list itself should be sent to
walrus-dev@caida.org.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
QUICK START

You can give Walrus a quick try by doing the following:

1. Extract 'walrus-0.1.tar.gz' or 'walrus-0.1.zip' anywhere you wish.  This
   will create a subdirectory named 'walrus-0.1' containing several JAR
   files among other things.

1. From the 'walrus-0.1' subdirectory, enter the following at a shell
   or command prompt:

     * on UNIX systems with Sun's JDK:

         java -cp antlrall-mod.jar:libsea.jar:walrus.jar H3Main

         (Or execute the supplied script: ./walrus)

     * on Windows with Sun's JDK:

         java -cp antlrall-mod.jar;libsea.jar;walrus.jar H3Main

2. Select the menu item File->Open (that is, 'Open' under the 'File' menu),
   and load the file 'champagne.graph' in the 'samples' subdirectory.
   The window will be blank while the file loads.  This graph has
   9175 nodes, 9174 tree links, and 6345 nontree links.  This should
   load in a few seconds, but it can take up to several minutes to load
   larger graphs.

3. Select Rendering->Start, once the Walrus logo reappears.

4. Click and drag with the left mouse button to rotate the display.
   It is normal for parts of the graph to disappear during rotations.
   Walrus uses an adaptive rendering algorithm that tries to maintain
   a given framerate (currently hardcoded) by rendering only as much as
   it can within each time slot.

5. Click on a node (yellow square) with the right mouse button to bring
   the node to the center.  Parts of the graph may disappear during
   these translations because of adaptive rendering.

6. Select Color Scheme->Predefined->Green-Olive-[Summer Sky].

7. Select Rendering->Update.

At this point, you should have a display with nodes in green, tree links
in olive green, and nontree links in a cobweb-like transparent blue.  Using
transparency like this is often a good way of exploring graphs with nontree
links.

Two other features you may wish to try are wobbling and continuous
rotations.  To activate wobbling, select Display->Wobble.  To stop the
wobbling, click anywhere in the window with the left mouse button.  To
activate continuous rotations, hold down the control key and click the left
mouse button anywhere in the window.  Now simply move the mouse (without
pressing or holding down any buttons and without holding down the control
key) to change the direction and speed of the rotations.  The rotation
vector is determined by the position of the mouse pointer relative to the
center of the window.  To stop the rotations, click anywhere in the window
with the left mouse button.

As mentioned earlier, Walrus uses an adaptive rendering algorithm that
tries to maintain a given framerate.  You may try out the nonadaptive
rendering algorithm for comparison by de-selecting Rendering->Adaptive
Rendering and then selecting Rendering->Update.  The nonadaptive
algorithm can be more responsive and produce a smoother display for
smaller graphs.

See 'guide.txt' in the 'docs' subdirectory for information on additional
commands and menus not covered here.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ACKNOWLEDGEMENTS

The LibSea graph library distributed with Walrus uses the excellent and
free ANTLR parser generator (see http://www.antlr.org).  The file
'antlrall-mod.jar' is ANTLR 2.7.1, slightly modified to improved parsing
time (specifically, the use of Class.newInstance() to allocate token
objects was replaced with a compile-time object-allocation expression).
The modifications reduced parsing time by 1-3 minutes (corresponding to a
30-50% reduction) on 50-80MB files.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LICENSE

Copyright 2000-2001 The Regents of the University of California
All Rights Reserved

Permission to use, copy, modify and distribute any part of this
Walrus software package for educational, research and non-profit
purposes, without fee, and without a written agreement is hereby
granted, provided that the above copyright notice, this paragraph
and the following paragraphs appear in all copies.
  
Those desiring to incorporate this into commercial products or use
for commercial purposes should contact the Technology Transfer
Office, University of California, San Diego, 9500 Gilman Drive, La
Jolla, CA 92093-0910, Ph: (858) 534-5815, FAX: (858) 534-7345.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY
PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS
SOFTWARE, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.
 
THE SOFTWARE PROVIDED HEREIN IS ON AN "AS IS" BASIS, AND THE
UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE,
SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. THE UNIVERSITY
OF CALIFORNIA MAKES NO REPRESENTATIONS AND EXTENDS NO WARRANTIES
OF ANY KIND, EITHER IMPLIED OR EXPRESS, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A
PARTICULAR PURPOSE, OR THAT THE USE OF THE SOFTWARE WILL NOT INFRINGE
ANY PATENT, TRADEMARK OR OTHER RIGHTS.
 
The Walrus software is developed by the Walrus Team at the
University of California, San Diego under the Cooperative Association
for Internet Data Analysis (CAIDA) Program.  Support for this effort
is provided by NSF grant ANI-9814421, DARPA NGI Contract N66001-98-2-8922,
Sun Microsystems, and CAIDA members.
