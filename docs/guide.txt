                       A BRIEF GUIDE TO USING WALRUS


===========================================================================
TABLE OF CONTENTS
===========================================================================

 Usage
 Menus
 Mouse Controls
 File Format

===========================================================================
USAGE
===========================================================================

Walrus usage has the following basic pattern: 1) load a graph, 2) adjust
colors and other configuration items, and 3) start the rendering.  Step 3
may be slightly unintuitive, but it fits the general design of Walrus.  In
Walrus, configuration changes do not take effect until the rendering is
explicitly started or "updated" by the user.  The alternative design of
immediately updating the rendering upon each configuration change is
impracticable since some changes have dramatic and expensive effects on the
rendering.

To run Walrus on a UNIX system (such as Solaris or Linux), enter the
following at a shell prompt from within the 'walrus-0.1' subdirectory:

   java -cp antlrall-mod.jar:libsea.jar:walrus.jar H3Main

Or, you may execute the supplied shell script:

   ./walrus

On Windows, enter the following at a command prompt:

   java -cp antlrall-mod.jar;libsea.jar;walrus.jar H3Main

(Windows uses semicolons to separate the components of the CLASSPATH.)

When viewing large graphs, you'll want to increase the maximum heap size.
For example, the command to run Walrus with the maximum heap size set to
128M looks like the following with Sun's JDK on a UNIX system:

   java -Xmx128M -cp antlrall-mod.jar:libsea.jar:walrus.jar H3Main


===========================================================================
MENUS
===========================================================================

File
   Open
      --- Loads a graph for viewing.  This unloads the previously opened graph.
   Save With Layout
      --- [Not Yet Implemented]
   Save With Layout As
      --- [Not Yet Implemented]
   Close
      --- Unloads a graph from memory, and resets menus.
   Preferences
      --- [Not Yet Implemented]
   Exit
      --- Quits program.

Rendering
   Start
      --- Starts rendering based on current configuration.
   Stop
      --- Stops rendering.
   Update
      --- Updates rendering to current configuration.  You must select
          this menu item to make configuration changes (such as changing
          the color of nodes) take effect.
   Adaptive Rendering
      --- Selects whether the adaptive rendering algorithm is used.
          The adaptive rendering algorithm tries to maintain a given
          framerate (currently hardcoded) by rendering only as much as
          it can within each time slot.  This trades display completeness
          for interaction speed.
   Multiple Node Sizes
      --- Selects whether nodes are drawn at three different sizes based
          on their distance from the center.  Enabling this reduces the
          size of the nodes near the periphery, where they are most likely
          to cause occlusion, and increases the size of the nodes near
          the center, the position of greatest interest in many cases.
          This also mirrors the distortions inherent in hyperbolic space,
          in which the apparent size decreases along the radial direction
          from the center.
   Depth Cueing
      --- Selects whether depth cueing (the progressive darkening of the
          display away from the viewer) is enabled.  Depth cueing helps
          the user to disambiguate the near from the far.
   Coordinate Axes
      --- Selects whether the coordinate axes and labels, and spherical
          outline, are drawn.  These provide a valuable cue to the orientation
          and movement of the display.
   Automatic Refresh
      --- Selects whether the display is redrawn whenever Walrus receives a
          refresh event from Java3D/AWT.  There appears to be a bug in
          Java3D/AWT that causes an excessive number of refresh events,
          especially when the user interacts with the menus.  With this
          option enabled, these refresh events can cause the display to
          flicker annoyingly.  By disabling this option and by manually
          refreshing when needed (see 'Refresh' below), you can
          reduce these distracting flickers.

Display

   Refresh
      --- Clears and redraws the display.  This is most useful when
          'Automatic Refresh' (see above) is turned off.
   Wobble
      --- Causes the display to wobble gently.  To stop the wobbling, click
          anywhere in the window with the left mouse button.

          Wobbling enhances the viewer's perception of shape and depth.
          It relies on our remarkable ability to perceive shape from
          motion.  Continuous rotations can also provide the same benefits
          (see the section on mouse controls below).
   Show Root Node
      --- Brings the root node of the current spanning tree to the center
          of the display.  This re-establishes a known display and thus
          can be useful when one gets lost in the graph.
   Show Previous Node
      --- Brings the node previously at the center of the display back to
          the center.  This provides a simple mechanism for taking a single
          step back in the sequence of graph traversals.

          The current and the previous nodes are remembered in a circular
          buffer.  That is, when this menu item is selected, the node
          currently at the center becomes the new "previous node", and thus
          it is possible to switch back and forth between the two most
          recently visited nodes by successively selecting this menu.
   Save Position
      --- Saves information about the node currently at the center of the
          display and about the orientation of the display itself.  This
          essentially takes a snapshot of the current display which may
          be re-established at a later time with 'Restore Position'.
   Restore Position
      --- Re-establishes the display saved with 'Save Position'.  This is
          possible so long as the graph has not been unloaded, or a different
          spanning tree chosen, since the display was last saved.
Spanning Tree
   --- Presents a list of spanning trees found in the loaded graph.
       Walrus uses the selected spanning tree to calculate the layout
       of the entire graph.
   ...

Color Scheme
   Predefined
      --- Sets up a predefined color scheme.  The names follow a convention
          for showing the colors in the scheme.  The color of nodes, tree
          links, and non-tree links are shown in order and separated by
          dashes, with transparent components enclosed in square brackets.

       Yellow-Green-[Grey]
           --- The color scheme active at startup.
       ...
       Beige-Gold-[Green]

   Node Color
      --- Specifies the coloring of nodes.
       Transparent
           --- Sets nodes to a transparent version of the currently active
               color.  Only the predefined colors (the named colors rather
               than an RGB-value derived from an attribute) can be made
               transparent.
       Invisible
           --- Causes nodes not to be rendered.
       Magenta
           --- Sets nodes to a predefined color.  All nodes are set to the
               same color.
       ...
       White

       RGB
           --- Sets nodes to the color specified by an RGB value stored in
               an attribute.  Each node is colored separately according to
               its value of the attribute selected in the 'Color Attribute'
               menu (see next).
       Color Attribute
           --- Presents a list of attributes in the loaded graph that may
               potentially contain color values.  All attributes of type
               int, float3, or double3 are included, although it is up to
               the user to judge whether any given attribute really
               contains color information.

               Int values should have 8-bit color components arranged in the
               lower three bytes in the order red, green, and blue, with
               blue in the lowest byte.  Float3 and double3 values should
               have color components in the order red, green, and blue,
               with each component in the range [0.0, 1.0].

               You must select the 'RGB' menu item first to enable this menu.
            ...
       Selection Attribute
           --- [Not Yet Implemented]  Determines which set of nodes
               will be colored.  All nodes having a true value for the
               attribute selected in this menu are colored according to
               the selected color scheme; all others are assigned the
               default color.
            ...

   Tree Link Color
      --- Specifies the coloring of links in the current spanning tree.
          The menu structure is the same as that for 'Node Color' above.
       ...
   Nontree Link Color
      --- Specifies the coloring of links not in the current spanning tree.
          The menu structure is the same as that for 'Node Color' above.
       ...

Node Label
      --- Presents a list of attributes found in the loaded graph.
          The values of the attributes selected in this menu are
          shown in the status bar when the user highlights a node with
          the middle mouse button (see the table of mouse controls below).
   ...

===========================================================================
MOUSE CONTROLS
===========================================================================

Many common operations are carried out with the mouse, either alone or
in combination with the shift or control key.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Summary of Mouse Controls:

  modifier  button  meaning
  --------  ------  ------------------------------------------------------
              L     drag to rotate display about the origin
              M     click or drag to examine attribute values and to
                       get visual feedback on picking
              R     click on a node to bring it to the origin
    
   shift      L     drag to continuously rotate the display
                      (only the initial drag amount and direction matters)
  control     L     click anywhere in the display to initiate continuous
                      rotations that track mouse movements

   shift      R     same as for M above; this alternative is provided for
                      users without a middle mouse button
  control     R     click anywhere to bring back the node previously
                      at the origin


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Detailed Description:

L:
    Drag the mouse anywhere on the display to rotate the display about
    the origin in the direction of the drag.  Only the relative motion
    of the drag matters.  The interaction model is that of the world in
    your hands (or the sphere in your hands), which you can turn about
    while remaining stationary yourself.

    It is normal for parts of the graph to disappear during rotations.
    Walrus uses an adaptive rendering algorithm that tries to maintain
    a given framerate (currently hardcoded) by rendering only as much
    as it can within each time slot.  This trades display completeness
    for interaction speed.

M:
    Click on a node, or drag over nodes, to examine attribute values and
    to get visual feedback on the picking algorithm.  To provide feedback
    on picking, Walrus displays grey cross hairs at the location of a
    mouse click and highlights the picked node, if any, with a red box.
    The picking algorithm chooses the node closest to the eye, along the
    line of sight, that lies within the circle enclosing the cross hairs.
    This can sometimes lead to behavior that seems unintuitive.  This also
    has the slight drawback of making it difficult to pick the more distant
    of two nearby nodes.  Drag the display with the left mouse button to
    clear the display of cross hairs and other artifacts.

    Walrus also displays, in the status bar, the values of any attributes
    selected in the 'Node Label' menu for the currently picked node.

R:
    Click on a node to bring it to the center of the display.  The entire
    graph shifts in an animated sequence.

    It is normal for parts of the graph to disappear during this operation,
    owing to the adaptive rendering algorithm (see the comments for 'L').

shift L: 
    Hold down the shift key and briefly drag with the left mouse button
    to continuously rotate the display.  The location of the drag doesn't
    matter, and the rotation starts when the drag ends.  The display will
    continously rotate in the direction of the drag and at a speed
    roughly proportional to the drag velocity.  Click anywhere with the
    left mouse button to stop the rotation.

control L:
    Click the left mouse button anywhere in the display while holding down
    the control key to initiate continuous rotations that track the
    subsequent movement of the mouse.  The direction and speed of the
    rotations is determined by the position of the mouse pointer relative
    to the center of the display.  This rotation vector is recomputed
    whenever the mouse moves.

    After the initial click, you control the rotations by moving the mouse
    freely, without pressing or holding down any buttons and without
    holding down the control key.  To stop the rotations, click anywhere
    in the display with the left mouse button.

control R:
    Click anywhere to bring back the node previously at the center of the
    display.  You can bounce back and forth between the current node and
    the previous node by clicking 'shift M' multiple times.


===========================================================================
FILE FORMAT
===========================================================================

Walrus uses the LibSea graph library to read and write graph files.  Please
see the documentation accompanying LibSea for a detailed description of the
file format.  However, the LibSea file format is by design open-ended.  It
provides flexible mechanisms by which application-specific conventions and
policies may be implemented.  This section describes the conventions
employed by Walrus.

There is currently only one convention.  Every graph file must specify at
least one spanning tree (but there can be more than one) by means of
qualifiers.  A spanning tree provides the crucial information needed to lay
out a graph.  The following excerpt from a graph file shows the required
form of the spanning tree qualifier:

   @qualifiers=[
      {
         @type=$spanning_tree;
         @name=$weighted_spanning_tree;
         @description=;
         @attributes=[
            { @attribute=0; @alias=$root; },
            { @attribute=1; @alias=$tree_link; }
         ];
      },
      {
         @type=$spanning_tree;
         @name=$breadth_first_spanning_tree;
         @description=;
         @attributes=[
            { @attribute=3; @alias=$root; },
            { @attribute=4; @alias=$tree_link; }
         ];
      }
   ];

The qualifiers must have type 'spanning_tree' and contain attributes
named 'root' and 'tree_link'.  In situations where the attributes
referenced by the qualifiers are not named 'root' or 'tree_link', you
can provide '@alias=' values that specify qualifier-specific alternate
names that match the required ones.  The use of '@alias=' values is
required when more than one spanning tree is included in a file, since
attribute names (outside of qualifiers) must be unique.

The referenced attributes must have boolean type.  The 'root' attribute
specifies the root node of the spanning tree, and the 'tree_link' attribute
specifies the subset of included links that make up the spanning tree.
The following shows how these attributes might be defined in a graph file:

   @attributeDefinitions=[
      {
         @name=$root;
         @type=bool;
         @default=|| false ||;
         @nodeValues=[ { @id=0; @value=T; } ];
         @linkValues=;
         @pathValues=;
      },
      {
         @name=$tree_link;
         @type=bool;
         @default=|| false ||;
         @nodeValues=;
         @linkValues=[
            { @id=0; @value=T; },
            { @id=1; @value=T; },
            { @id=2; @value=T; },
                  ...
            { @id=361; @value=T; },
            { @id=362; @value=T; },
            { @id=363; @value=T; }
         ];
         @pathValues=;
      }
   ]

To save space both in the file and in the internal representation, it is
recommended that these attributes be defined with a default value of false
and that explicit values be supplied only for nodes and links that have
true values.
